"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_linear_gradient_1 = __importDefault(require("react-native-linear-gradient"));
const Constants_1 = require("./Constants");
const styles = react_native_1.StyleSheet.create({
    absoluteGradient: {
        height: "100%",
        position: "absolute",
        width: "100%"
    },
    container: {
        alignItems: "center",
        flex: 1,
        justifyContent: "center"
    },
    gradientChild: {
        flex: 1
    }
});
const getInitialState = ({ isLoading, layout }) => ({
    isLoading,
    layout: layout
});
const getDefaultProps = () => ({
    containerStyle: styles.container,
    easing: Constants_1.DEFAULT_EASING,
    duration: Constants_1.DEFAULT_DURATION,
    layout: [],
    animationType: Constants_1.DEFAULT_ANIMATION_TYPE,
    animationDirection: Constants_1.DEFAULT_ANIMATION_DIRECTION,
    isLoading: Constants_1.DEFAULT_LOADING,
    boneColor: Constants_1.DEFAULT_BONE_COLOR,
    highlightColor: Constants_1.DEFAULT_HIGHLIGHT_COLOR,
    intensity: Constants_1.DEFAULT_INTENSITY
});
class SkeletonContent extends React.Component {
    constructor() {
        super(...arguments);
        this.state = getInitialState(this.props);
        this.animationPulse = new react_native_1.Animated.Value(0);
        this.animationShiver = new react_native_1.Animated.Value(0);
        this.interpolatedBackgroundColor = this.animationPulse.interpolate({
            inputRange: [0, 1],
            outputRange: [this.props.boneColor, this.props.highlightColor]
        });
        this.getGradientStartDirection = () => {
            let direction = { x: 0, y: 0 };
            if (this.props.animationType === "shiver") {
                if (this.props.animationDirection === "horizontalLeft" ||
                    this.props.animationDirection === "horizontalRight" ||
                    this.props.animationDirection === "verticalTop" ||
                    this.props.animationDirection === "verticalDown" ||
                    this.props.animationDirection === "diagonalDownRight") {
                    direction = { x: 0, y: 0 };
                }
                else if (this.props.animationDirection === "diagonalTopLeft") {
                    direction = { x: 1, y: 1 };
                }
                else if (this.props.animationDirection === "diagonalTopRight") {
                    direction = { x: 0, y: 1 };
                }
                else {
                    // diagonalDownLeft
                    direction = { x: 1, y: 0 };
                }
            }
            return direction;
        };
        this.getGradientEndDirection = () => {
            let direction = { x: 0, y: 0 };
            if (this.props.animationType === "shiver") {
                if (this.props.animationDirection === "horizontalLeft" ||
                    this.props.animationDirection === "horizontalRight" ||
                    this.props.animationDirection === "diagonalTopRight") {
                    direction = { x: 1, y: 0 };
                }
                else if (this.props.animationDirection === "verticalTop" ||
                    this.props.animationDirection === "verticalDown" ||
                    this.props.animationDirection === "diagonalDownLeft") {
                    direction = { x: 0, y: 1 };
                }
                else if (this.props.animationDirection === "diagonalTopLeft") {
                    direction = { x: 0, y: 0 };
                }
                else {
                    // diagonalDownRight
                    direction = { x: 1, y: 1 };
                }
            }
            return direction;
        };
        this.gradientStart = this.getGradientStartDirection();
        this.gradientEnd = this.getGradientEndDirection();
        this.playAnimation = () => {
            if (this.props.animationType === "pulse") {
                react_native_1.Animated.loop(react_native_1.Animated.sequence([
                    react_native_1.Animated.timing(this.animationPulse, {
                        toValue: 1,
                        duration: this.props.duration / 2,
                        easing: this.props.easing,
                        delay: this.props.duration
                    }),
                    react_native_1.Animated.timing(this.animationPulse, {
                        toValue: 0,
                        easing: this.props.easing,
                        duration: this.props.duration / 2
                    })
                ])).start();
            }
            else {
                react_native_1.Animated.loop(react_native_1.Animated.timing(this.animationShiver, {
                    toValue: 1,
                    duration: this.props.duration,
                    easing: this.props.easing
                })).start();
            }
        };
        this.getBoneStyles = (boneLayout) => {
            const boneStyle = Object.assign({ width: boneLayout.width || 0, height: boneLayout.height || 0, borderRadius: boneLayout.borderRadius || Constants_1.DEFAULT_BORDER_RADIUS }, boneLayout);
            if (this.props.animationType === "pulse") {
                boneStyle.backgroundColor = this.interpolatedBackgroundColor;
            }
            else {
                boneStyle.overflow = "hidden";
                boneStyle.backgroundColor =
                    boneLayout.backgroundColor || this.props.boneColor;
            }
            return boneStyle;
        };
        this.getGradientTransform = (boneLayout) => {
            let transform = {};
            const interpolatedPosition = this.animationShiver.interpolate({
                inputRange: [0, 1],
                outputRange: this.getPositionRange(boneLayout)
            });
            if (this.props.animationDirection !== "verticalTop" &&
                this.props.animationDirection !== "verticalDown") {
                transform = { translateX: interpolatedPosition };
            }
            else {
                transform = { translateY: interpolatedPosition };
            }
            return transform;
        };
        this.getPositionRange = (boneLayout) => {
            const outputRange = [];
            const boneWidth = boneLayout.width || 0;
            const boneHeight = boneLayout.height || 0;
            if (this.props.animationDirection === "horizontalRight" ||
                this.props.animationDirection === "diagonalDownRight" ||
                this.props.animationDirection === "diagonalTopRight") {
                outputRange.push(-boneWidth, +boneWidth);
            }
            else if (this.props.animationDirection === "horizontalLeft" ||
                this.props.animationDirection === "diagonalDownLeft" ||
                this.props.animationDirection === "diagonalTopLeft") {
                outputRange.push(+boneWidth, -boneWidth);
            }
            else if (this.props.animationDirection === "verticalDown") {
                outputRange.push(-boneHeight, +boneHeight);
            }
            else {
                // verticalTop
                outputRange.push(+boneHeight, -boneHeight);
            }
            return outputRange;
        };
        this.getStaticBone = (layoutStyle, key) => (<react_native_1.Animated.View key={layoutStyle.key || key} style={this.getBoneStyles(layoutStyle)}/>);
        this.getShiverBone = (layoutStyle, key) => (<react_native_1.View key={layoutStyle.key || key} style={this.getBoneStyles(layoutStyle)}>
      <react_native_1.Animated.View style={[
            styles.absoluteGradient,
            {
                transform: [this.getGradientTransform(layoutStyle)]
            }
        ]}>
        <react_native_linear_gradient_1.default colors={[
            this.props.boneColor,
            this.props.highlightColor,
            this.props.boneColor
        ]} start={this.gradientStart} end={this.gradientEnd} style={styles.gradientChild}/>
      </react_native_1.Animated.View>
    </react_native_1.View>);
        this.getBones = (layout, children) => {
            if (layout.length > 0) {
                const iterator = new Array(layout.length);
                for (let i = 0; i < layout.length; i++) {
                    iterator[i] = 0;
                }
                return iterator.map((_, i) => {
                    if (this.props.animationType === "pulse" ||
                        this.props.animationType === "none") {
                        return this.getStaticBone(layout[i], i);
                    }
                    else {
                        return this.getShiverBone(layout[i], i);
                    }
                });
            }
            else {
                return React.Children.map(children, (child, i) => {
                    const styling = child.props.style || {};
                    if (this.props.animationType === "pulse" ||
                        this.props.animationType === "none") {
                        return this.getStaticBone(styling, i);
                    }
                    else {
                        return this.getShiverBone(styling, i);
                    }
                });
            }
        };
        this.renderLayout = (isLoading, bones, children) => (isLoading ? bones : children);
    }
    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.isLoading !== prevState.isLoading ||
            nextProps.layout !== prevState.layout) {
            return { isLoading: nextProps.isLoading, layout: nextProps.layout };
        }
        else {
            return null;
        }
    }
    componentDidMount() {
        this.playAnimation();
    }
    render() {
        const { isLoading, layout } = this.state;
        const { children } = this.props;
        const bones = this.getBones(layout, children);
        return (<react_native_1.View style={this.props.containerStyle}>
        {this.renderLayout(isLoading, bones, children)}
      </react_native_1.View>);
    }
}
exports.default = SkeletonContent;
SkeletonContent.defaultProps = getDefaultProps();
